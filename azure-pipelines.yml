trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/Database1.sln'  # Update to your solution file
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  sqlServer: 'om-db-testing.database.windows.net'  # Your SQL server name
  databaseName: 'db-auto'  # Your target database name
  sqlUsername: 'omnagare'  # Your SQL username
  sqlPassword: 'Ironman7028@'  # SQL password should be stored as a secret variable in the pipeline
  resourceGroupName: 'db-om-testing'  # Define the resource group name here

steps:
# Install NuGet (ensures package manager is available)
- task: NuGetToolInstaller@1

# Restore NuGet packages for the solution
- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

# Build the solution using Visual Studio
- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# Run tests (if any)
- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# Copy the .dacpac file from the build output
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'  # Default working directory for the build agent
    Contents: '**/bin/Release/*.dacpac'               # Match the .dacpac file anywhere under the bin\Release folder
    TargetFolder: '$(Build.ArtifactStagingDirectory)' # Artifact staging directory

# Copy the sample.sql file from Scripts folder
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)\Scripts'  # Point to the Scripts folder
    Contents: 'sample.sql'                                    # Ensure sample.sql is copied
    TargetFolder: '$(Build.ArtifactStagingDirectory)\Scripts'   # Specify where to copy it in the artifact

# Publish the artifact for deployment or other pipelines
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'  # The folder containing the .dacpac and sample.sql
    ArtifactName: 'drop'
    publishLocation: 'Container'

# Deploy the .dacpac file to Azure SQL Database using Azure CLI
- task: AzureCLI@2
  inputs:
    azureSubscription: 'Ballotnow-Backend-Service'  # Replace with your Azure subscription
    scriptType: 'bash'  # Azure CLI uses bash by default
    scriptLocation: 'inlineScript'  # Inline Azure CLI script
    inlineScript: |
      # Set the Azure subscription context
      az account set --subscription $(azureSubscription)
      
      # Deploy the .dacpac file to the Azure SQL Database
      az sql db update \
        --server $(sqlServer) \
        --name $(databaseName) \
        --resource-group $(resourceGroupName) \
        --admin-user $(sqlUsername) \
        --admin-password $(sqlPassword) \
        --additional-arguments '/p:DropObjectsNotInSource=true'

    displayName: 'Deploy DACPAC to Azure SQL Database'
